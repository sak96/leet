//! Solution for https://leetcode.com/problems/number-of-ways-to-arrive-at-destination
//! 1976. Number of Ways to Arrive at Destination

use std::cmp::Reverse;
impl Solution {
    const MOD: u32 = 1e9 as u32 + 7;
    pub fn count_paths(n: i32, roads: Vec<Vec<i32>>) -> i32 {
        let n = n as usize;
        let mut road_map = vec![vec![]; n];
        for road in roads {
            let (u, v, t) = (road[0] as usize, road[1] as usize, road[2] as i64);
            road_map[u].push((v, t));
            road_map[v].push((u, t));
        }
        let mut heap = std::collections::BinaryHeap::new();
        let mut time = vec![i64::MAX; n];
        let mut count = vec![0; n];
        heap.push(Reverse((0, 0)));
        count[0] = 1;
        time[0] = 0;

        // dt1 => 0 ... m; dt2 ==> m .. n; ?? => 0 ..n;
        while let Some(Reverse((dt1, m))) = heap.pop() {
            for (n, dt2) in &road_map[m] {
                let n = *n;
                match (dt1 + dt2).cmp(&time[n]) {
                    std::cmp::Ordering::Less => {
                        time[n] = dt1 + dt2;
                        count[n] = count[m];
                        heap.push(Reverse((time[n], n)));
                    }
                    std::cmp::Ordering::Equal => {
                        count[n] = (count[n] + count[m]) % Self::MOD;
                    }
                    std::cmp::Ordering::Greater => {}
                }
            }
        }
        count[n - 1] as i32
    }
}

// << ---------------- Code below here is only for local use ---------------- >>

pub struct Solution;

#[cfg(test)]
mod tests {
    use super::*;

    use rstest::rstest;

    #[rstest]
    #[case(7, vec![vec![0,6,7],vec![0,1,2],vec![1,2,3],vec![1,3,3],vec![6,3,3],vec![3,5,1],vec![6,5,1],vec![2,5,1],vec![0,4,5],vec![4,6,2]], 4)]
    #[case(2, vec![vec![1,0,10]], 1)]
    #[case(200, 
        vec![
vec![0, 1, 865326231],
vec![1, 4, 865326231],
vec![0, 2, 865326231],
vec![2, 4, 865326231],
vec![0, 3, 865326231],
vec![3, 4, 865326231],
vec![4, 5, 647618270],
vec![5, 9, 647618270],
vec![4, 6, 647618270],
vec![6, 9, 647618270],
vec![4, 7, 647618270],
vec![7, 9, 647618270],
vec![4, 8, 647618270],
vec![8, 9, 647618270],
vec![9, 10, 153310768],
vec![10, 15, 153310768],
vec![9, 11, 153310768],
vec![11, 15, 153310768],
vec![9, 12, 153310768],
vec![12, 15, 153310768],
vec![9, 13, 153310768],
vec![13, 15, 153310768],
vec![9, 14, 153310768],
vec![14, 15, 153310768],
vec![15, 16, 446216658],
vec![16, 21, 446216658],
vec![15, 17, 446216658],
vec![17, 21, 446216658],
vec![15, 18, 446216658],
vec![18, 21, 446216658],
vec![15, 19, 446216658],
vec![19, 21, 446216658],
vec![15, 20, 446216658],
vec![20, 21, 446216658],
vec![21, 22, 482432125],
vec![22, 27, 482432125],
vec![21, 23, 482432125],
vec![23, 27, 482432125],
vec![21, 24, 482432125],
vec![24, 27, 482432125],
vec![21, 25, 482432125],
vec![25, 27, 482432125],
vec![21, 26, 482432125],
vec![26, 27, 482432125],
vec![27, 28, 546917635],
vec![28, 32, 546917635],
vec![27, 29, 546917635],
vec![29, 32, 546917635],
vec![27, 30, 546917635],
vec![30, 32, 546917635],
vec![27, 31, 546917635],
vec![31, 32, 546917635],
vec![32, 33, 905837683],
vec![33, 37, 905837683],
vec![32, 34, 905837683],
vec![34, 37, 905837683],
vec![32, 35, 905837683],
vec![35, 37, 905837683],
vec![32, 36, 905837683],
vec![36, 37, 905837683],
vec![37, 38, 941383964],
vec![38, 41, 941383964],
vec![37, 39, 941383964],
vec![39, 41, 941383964],
vec![37, 40, 941383964],
vec![40, 41, 941383964],
vec![41, 42, 482278242],
vec![42, 44, 482278242],
vec![41, 43, 482278242],
vec![43, 44, 482278242],
vec![44, 45, 209029963],
vec![45, 49, 209029963],
vec![44, 46, 209029963],
vec![46, 49, 209029963],
vec![44, 47, 209029963],
vec![47, 49, 209029963],
vec![44, 48, 209029963],
vec![48, 49, 209029963],
vec![49, 50, 180362920],
vec![50, 53, 180362920],
vec![49, 51, 180362920],
vec![51, 53, 180362920],
vec![49, 52, 180362920],
vec![52, 53, 180362920],
vec![53, 54, 40040617],
vec![54, 58, 40040617],
vec![53, 55, 40040617],
vec![55, 58, 40040617],
vec![53, 56, 40040617],
vec![56, 58, 40040617],
vec![53, 57, 40040617],
vec![57, 58, 40040617],
vec![58, 59, 429647103],
vec![59, 62, 429647103],
vec![58, 60, 429647103],
vec![60, 62, 429647103],
vec![58, 61, 429647103],
vec![61, 62, 429647103],
vec![62, 63, 863858638],
vec![63, 64, 250353988],
vec![64, 66, 250353988],
vec![63, 65, 250353988],
vec![65, 66, 250353988],
vec![66, 67, 502785687],
vec![67, 68, 565934645],
vec![68, 69, 548158326],
vec![69, 74, 548158326],
vec![68, 70, 548158326],
vec![70, 74, 548158326],
vec![68, 71, 548158326],
vec![71, 74, 548158326],
vec![68, 72, 548158326],
vec![72, 74, 548158326],
vec![68, 73, 548158326],
vec![73, 74, 548158326],
vec![74, 75, 858926247],
vec![75, 79, 858926247],
vec![74, 76, 858926247],
vec![76, 79, 858926247],
vec![74, 77, 858926247],
vec![77, 79, 858926247],
vec![74, 78, 858926247],
vec![78, 79, 858926247],
vec![79, 80, 610164528],
vec![80, 82, 610164528],
vec![79, 81, 610164528],
vec![81, 82, 610164528],
vec![82, 83, 116910438],
vec![83, 84, 153203278],
vec![84, 88, 153203278],
vec![83, 85, 153203278],
vec![85, 88, 153203278],
vec![83, 86, 153203278],
vec![86, 88, 153203278],
vec![83, 87, 153203278],
vec![87, 88, 153203278],
vec![88, 89, 484666281],
vec![89, 93, 484666281],
vec![88, 90, 484666281],
vec![90, 93, 484666281],
vec![88, 91, 484666281],
vec![91, 93, 484666281],
vec![88, 92, 484666281],
vec![92, 93, 484666281],
vec![93, 94, 694001013],
vec![94, 95, 180373702],
vec![95, 96, 392438425],
vec![96, 97, 392438425],
vec![97, 98, 915720722],
vec![98, 99, 915720722],
vec![99, 100, 660886218],
vec![100, 101, 980566840],
vec![101, 103, 980566840],
vec![100, 102, 980566840],
vec![102, 103, 980566840],
vec![103, 104, 509703517],
vec![104, 105, 817920401],
vec![105, 106, 992341639],
vec![106, 107, 992341639],
vec![107, 108, 180854348],
vec![108, 111, 180854348],
vec![107, 109, 180854348],
vec![109, 111, 180854348],
vec![107, 110, 180854348],
vec![110, 111, 180854348],
vec![111, 112, 699029750],
vec![112, 115, 699029750],
vec![111, 113, 699029750],
vec![113, 115, 699029750],
vec![111, 114, 699029750],
vec![114, 115, 699029750],
vec![115, 116, 973634138],
vec![116, 120, 973634138],
vec![115, 117, 973634138],
vec![117, 120, 973634138],
vec![115, 118, 973634138],
vec![118, 120, 973634138],
vec![115, 119, 973634138],
vec![119, 120, 973634138],
vec![120, 121, 785570880],
vec![121, 125, 785570880],
vec![120, 122, 785570880],
vec![122, 125, 785570880],
vec![120, 123, 785570880],
vec![123, 125, 785570880],
vec![120, 124, 785570880],
vec![124, 125, 785570880],
vec![125, 126, 720521316],
vec![126, 130, 720521316],
vec![125, 127, 720521316],
vec![127, 130, 720521316],
vec![125, 128, 720521316],
vec![128, 130, 720521316],
vec![125, 129, 720521316],
vec![129, 130, 720521316],
vec![130, 131, 829375409],
vec![131, 132, 152165056],
vec![132, 133, 152165056],
vec![133, 134, 50370340],
vec![134, 137, 50370340],
vec![133, 135, 50370340],
vec![135, 137, 50370340],
vec![133, 136, 50370340],
vec![136, 137, 50370340],
vec![137, 138, 704034877],
vec![138, 139, 484468238],
vec![139, 143, 484468238],
vec![138, 140, 484468238],
vec![140, 143, 484468238],
vec![138, 141, 484468238],
vec![141, 143, 484468238],
vec![138, 142, 484468238],
vec![142, 143, 484468238],
vec![143, 144, 205433987],
vec![144, 145, 205433987],
vec![145, 146, 166956493],
vec![146, 149, 166956493],
vec![145, 147, 166956493],
vec![147, 149, 166956493],
vec![145, 148, 166956493],
vec![148, 149, 166956493],
vec![149, 150, 476307189],
vec![150, 151, 388217973],
vec![151, 152, 388217973],
vec![152, 153, 211490211],
vec![153, 155, 211490211],
vec![152, 154, 211490211],
vec![154, 155, 211490211],
vec![155, 156, 186981143],
vec![156, 160, 186981143],
vec![155, 157, 186981143],
vec![157, 160, 186981143],
vec![155, 158, 186981143],
vec![158, 160, 186981143],
vec![155, 159, 186981143],
vec![159, 160, 186981143],
vec![160, 161, 305206923],
vec![161, 166, 305206923],
vec![160, 162, 305206923],
vec![162, 166, 305206923],
vec![160, 163, 305206923],
vec![163, 166, 305206923],
vec![160, 164, 305206923],
vec![164, 166, 305206923],
vec![160, 165, 305206923],
vec![165, 166, 305206923],
vec![166, 167, 482432170],
vec![167, 171, 482432170],
vec![166, 168, 482432170],
vec![168, 171, 482432170],
vec![166, 169, 482432170],
vec![169, 171, 482432170],
vec![166, 170, 482432170],
vec![170, 171, 482432170],
vec![171, 172, 455923183],
vec![172, 177, 455923183],
vec![171, 173, 455923183],
vec![173, 177, 455923183],
vec![171, 174, 455923183],
vec![174, 177, 455923183],
vec![171, 175, 455923183],
vec![175, 177, 455923183],
vec![171, 176, 455923183],
vec![176, 177, 455923183],
vec![177, 178, 266584262],
vec![178, 179, 266584262],
vec![179, 180, 751579148],
vec![180, 185, 751579148],
vec![179, 181, 751579148],
vec![181, 185, 751579148],
vec![179, 182, 751579148],
vec![182, 185, 751579148],
vec![179, 183, 751579148],
vec![183, 185, 751579148],
vec![179, 184, 751579148],
vec![184, 185, 751579148],
vec![185, 186, 389984057],
vec![186, 188, 389984057],
vec![185, 187, 389984057],
vec![187, 188, 389984057],
vec![188, 189, 926312609],
vec![189, 192, 926312609],
vec![188, 190, 926312609],
vec![190, 192, 926312609],
vec![188, 191, 926312609],
vec![191, 192, 926312609],
vec![192, 193, 323360653],
vec![193, 196, 323360653],
vec![192, 194, 323360653],
vec![194, 196, 323360653],
vec![192, 195, 323360653],
vec![195, 196, 323360653],
vec![196, 197, 977934872],
vec![197, 198, 977934872],
vec![198, 199, 434009290],
], 940420443)]
    fn case(#[case] n: i32, #[case] roads: Vec<Vec<i32>>, #[case] expected: i32) {
        let actual = Solution::count_paths(n, roads);
        assert_eq!(actual, expected);
    }
}
