type Obstacle = i32;
type Count = i32;

use std::collections::{hash_map::Entry, BTreeMap, HashMap};
impl Solution {
    pub fn longest_obstacle_course_at_each_position(obstacles: Vec<Obstacle>) -> Vec<Count> {
        let mut obstacle_map = BTreeMap::<Obstacle, Count>::new();
        let mut count_map = HashMap::<Count, Obstacle>::new();
        obstacles
            .into_iter()
            .map(|obstacle| {
                // get count of biggest obstacle smaller than current obstacle
                // add 1 to it
                let count = obstacle_map
                    .range(..=obstacle)
                    .next_back()
                    .map(|(_, count)| *count)
                    .unwrap_or(0)
                    + 1;
                let should_insert = match count_map.entry(count) {
                    // if smaller obstacle has same count as bigger one smaller one
                    // logic smaller one can be used by all obstacle in range small..=bigger
                    Entry::Occupied(mut entry) if entry.get() > &obstacle => {
                        let prev_obstacle = entry.get_mut();
                        obstacle_map.remove(prev_obstacle);
                        *prev_obstacle = obstacle;
                        true
                    }
                    // no obstacle has same count add it
                    Entry::Vacant(entry) => {
                        entry.insert(obstacle);
                        true
                    }
                    // all other case -> no operations
                    _ => false,
                };
                // insert the obstacle in obstacle map
                if should_insert {
                    // In case there was older count for same obstacle
                    // remove it from count map
                    if let Some(old_count) = obstacle_map.insert(obstacle, count) {
                        count_map.remove(&old_count);
                    }
                }
                count
            })
            .collect()
    }
}

pub struct Solution;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn case1() {
        assert_eq!(
            Solution::longest_obstacle_course_at_each_position([1, 2, 3, 2].into()),
            [1, 2, 3, 3]
        )
    }

    #[test]
    fn case2() {
        assert_eq!(
            Solution::longest_obstacle_course_at_each_position(
                [5, 3, 4, 4, 4, 2, 1, 1, 4, 1].into()
            ),
            [1, 1, 2, 3, 4, 1, 1, 2, 5, 3]
        )
    }

    #[test]
    fn case3() {
        let input = [
            171, 145, 37, 49, 90, 2, 200, 62, 28, 103, 10, 110, 141, 197, 106, 74, 181, 193, 112,
            93, 30, 171, 32, 181, 57, 48, 173, 195, 42, 169, 175, 171, 77, 139, 137, 45, 189, 148,
            126, 121, 50, 16, 94, 58, 34, 27, 76, 131, 191, 60, 16, 33, 21, 174, 113, 100, 125,
            142, 13, 147, 192, 123, 125, 102, 196, 17, 51, 42, 89, 102, 103, 172, 139, 120, 168,
            110, 9, 178, 168, 109, 169, 128, 152, 196, 10, 17, 145, 79, 109, 9, 163, 72, 160, 68,
            57, 43, 62, 140, 62, 177, 174, 20, 87, 135, 40, 43, 180, 22, 56, 189, 182, 6, 182, 6,
            96, 190, 91, 64, 17, 36, 114, 151, 109, 191, 106, 3, 96, 171, 70, 59, 179, 133, 80,
            151, 62, 113, 170, 149, 30, 10, 61, 195, 142, 41, 27, 192, 96, 110, 114, 119, 177, 2,
            42, 39, 100, 63, 13, 23, 100, 17, 173, 189, 8, 198, 82, 103, 106, 53, 89, 144, 17, 179,
            186, 158, 67, 11, 94, 141, 187, 85, 74, 130, 156, 108, 187, 102, 102, 84, 27, 108, 94,
            43, 39, 140, 135, 146, 187, 102, 156, 74, 128, 74, 189, 100, 62, 7, 4, 168, 182, 8,
            168, 107, 39, 59, 115, 20, 94, 29, 116, 171, 61, 120, 42, 45, 158, 79, 158, 185, 170,
            7, 23, 145, 184, 18, 15, 117, 48, 61, 135, 186, 146, 97, 30, 12, 173, 58, 22, 157, 15,
            63, 184, 200, 140, 96, 61, 48, 52, 80, 19, 165, 187, 147, 77, 174, 84, 23, 119, 168,
            15, 50, 10, 132, 30, 133, 7, 185, 146, 124, 64, 99, 15, 108, 174, 75, 172, 3, 128, 85,
            19, 41, 139, 72, 173, 50, 99, 93, 6, 103, 179, 98, 159, 85, 136, 73, 128, 121, 106,
            104, 124, 152, 69, 41, 115, 150, 175, 152, 142, 88, 116, 141, 23, 174, 53, 196, 126,
            24, 200, 65, 68, 101, 193, 195, 148, 147, 154, 48, 147, 84, 60, 29, 106, 100, 192, 122,
            137, 51, 151, 27, 128, 23, 141, 194, 77, 40, 119, 58, 117, 168, 186, 167, 92, 135, 107,
            194, 107, 187, 15, 93, 120, 112, 50, 81, 23, 124, 153, 73, 167, 187, 31, 96, 165, 67,
            127, 192, 129, 145, 69, 135, 199, 166, 189, 177, 22, 10, 65, 54, 59, 119, 147, 124, 15,
            51, 5, 164, 112, 94, 24, 103, 112, 182, 167, 187, 57, 155, 72, 76, 184, 118, 68, 123,
            162, 15, 142, 190, 114, 160, 181, 154, 177, 72, 76, 176, 32, 1, 112, 185, 128, 21, 34,
            193, 167, 52, 175, 152, 126, 138, 154, 93, 47, 82, 125, 27, 23, 71, 109, 38, 63, 178,
            96, 50, 167, 84, 57, 195, 33, 6, 154, 49, 73, 132, 111, 87, 184, 180, 187, 196, 186, 8,
            195, 173, 181, 136, 48, 60, 58, 125, 189, 168, 153, 122, 69, 169, 45, 115, 135, 169,
            131, 35, 128, 193, 18, 185, 196, 174, 192, 159, 160, 121, 155, 182, 136, 124, 39, 58,
            165, 47, 61, 2, 80, 167, 56, 66, 191, 136, 17, 48, 166, 131, 67, 149, 28, 19, 116, 123,
            96, 8, 134, 156, 140, 148, 4, 71, 164, 180, 17, 110, 96, 140, 10, 16, 118, 171, 26, 50,
            68, 191, 182, 156, 101, 29, 149, 101, 107, 5, 101, 181, 51, 71, 54, 179, 191, 17, 185,
            144, 136, 195, 99, 121, 45, 51, 86, 110, 148, 144, 3, 116, 73, 81, 11, 76, 68, 17, 47,
            24, 154, 135, 155, 194, 178, 198, 9, 175, 105, 80, 71, 44, 169, 119, 152, 42, 158, 17,
            107, 78, 28, 161, 7, 16, 125, 67, 156, 27, 23, 27, 162, 184, 176, 49, 113, 18, 39, 152,
            84, 131, 155, 80, 64, 147, 162, 46, 26, 48, 110, 83, 10, 48, 107, 48, 121, 168, 123,
            91, 105, 167, 160, 196, 73, 31, 26, 13, 114, 123, 150, 155, 92, 3, 83, 74, 51, 199, 16,
            79, 106, 31, 71, 84, 71, 173, 87, 50, 130, 105, 155, 46, 162, 106, 76, 10, 154, 113,
            148, 32, 109, 24, 145, 157, 23, 54, 190, 98, 30, 94, 124, 59, 126, 93, 187, 130, 61,
            111, 112, 197, 130, 131, 173, 114, 105, 118, 103, 162, 37, 43, 70, 122, 28, 63, 10,
            158, 46, 161, 37, 193, 137, 20, 149, 79, 192, 155, 193, 75, 161, 101, 110, 15, 170,
            126, 96, 198, 50, 91, 101, 100, 179, 48, 116, 53, 191, 85, 193, 91, 111, 35, 39, 84, 7,
            37, 168, 125, 125, 85, 40, 164, 188, 56, 24, 76, 99, 54, 128, 127, 187, 156, 43, 133,
            198, 67, 193, 85, 165, 182, 59, 88, 164, 93, 80, 161, 194, 103, 176, 66, 116, 122, 166,
            158, 144, 29, 92, 138, 180, 42, 114, 151, 192, 35, 144, 140, 121, 142, 72, 172, 31,
            185, 102, 111, 70, 192, 62, 104, 149, 185, 38, 71, 79, 120, 98, 141, 34, 19, 47, 31, 3,
            36, 77, 104, 117, 138, 11, 177, 125, 117, 27, 130, 89, 18, 15, 151, 18, 182, 77, 127,
            153, 162, 110, 151, 38, 35, 100, 46, 97, 25, 155, 54, 126, 156, 123, 25, 34, 112, 65,
            126, 39, 80, 148, 108, 167, 70, 128, 42, 179, 157, 71, 132, 153, 74, 165, 143, 71, 120,
            165, 198, 80, 58, 31, 109, 94, 115, 11, 184, 142, 93, 13, 76, 10, 16, 142, 84, 167, 67,
            72, 34, 166, 90, 134, 81, 17, 18, 16, 139, 135, 10, 162, 71, 66, 122, 83, 173, 55, 32,
            70, 112, 9, 165, 182, 120, 137, 131, 48, 138, 40, 155, 69, 118, 34, 182, 114, 89, 136,
            147, 172, 153, 159, 6, 171, 25, 159, 176, 117, 90, 96, 21, 87, 34, 64, 146, 110, 121,
            138, 65, 124, 123, 47, 161, 186, 7, 49, 184, 160, 115, 181, 148, 133, 174, 108, 188,
            95, 48, 164, 141, 173, 85,
        ];

        let output = [
            1, 1, 1, 2, 3, 1, 4, 3, 2, 4, 2, 5, 6, 7, 5, 4, 7, 8, 6, 5, 3, 7, 4, 8, 5, 5, 8, 9, 5,
            7, 9, 8, 6, 7, 7, 6, 10, 8, 7, 7, 7, 3, 8, 8, 5, 4, 9, 10, 11, 9, 4, 5, 5, 11, 10, 10,
            11, 12, 3, 13, 14, 11, 12, 11, 15, 5, 8, 6, 10, 12, 13, 14, 14, 14, 15, 14, 2, 16, 16,
            14, 17, 15, 16, 18, 3, 6, 16, 10, 15, 3, 17, 10, 17, 10, 9, 7, 10, 16, 11, 18, 18, 7,
            12, 16, 8, 9, 19, 8, 10, 20, 20, 2, 21, 3, 13, 22, 13, 12, 7, 9, 16, 17, 16, 23, 14, 2,
            14, 18, 13, 11, 19, 17, 14, 18, 12, 17, 19, 18, 9, 4, 12, 24, 18, 10, 9, 24, 15, 17,
            18, 19, 20, 2, 11, 10, 16, 13, 5, 9, 17, 8, 20, 22, 4, 25, 15, 18, 19, 12, 16, 20, 9,
            21, 22, 21, 14, 5, 17, 20, 23, 16, 15, 20, 21, 20, 24, 18, 19, 16, 10, 21, 18, 12, 11,
            22, 22, 23, 25, 20, 24, 16, 22, 17, 26, 19, 13, 4, 3, 25, 26, 5, 26, 21, 12, 13, 22,
            10, 19, 11, 23, 27, 14, 24, 13, 14, 25, 18, 26, 28, 27, 5, 11, 25, 28, 10, 6, 24, 15,
            16, 25, 29, 26, 20, 12, 6, 28, 16, 11, 27, 7, 17, 29, 30, 26, 20, 17, 16, 17, 19, 11,
            28, 30, 27, 18, 29, 20, 12, 25, 29, 8, 17, 6, 26, 13, 27, 6, 30, 28, 26, 18, 21, 9, 22,
            30, 19, 30, 3, 27, 21, 12, 14, 28, 19, 31, 18, 22, 22, 4, 23, 32, 23, 29, 22, 28, 20,
            28, 26, 24, 24, 27, 29, 19, 15, 25, 29, 32, 30, 29, 23, 26, 29, 13, 32, 19, 33, 28, 14,
            34, 20, 21, 24, 33, 34, 30, 30, 31, 17, 31, 22, 20, 15, 25, 24, 33, 27, 29, 19, 32, 15,
            29, 14, 30, 34, 22, 16, 27, 20, 27, 33, 34, 33, 24, 30, 26, 35, 27, 35, 10, 25, 28, 28,
            19, 23, 15, 29, 33, 22, 34, 36, 16, 26, 34, 21, 30, 37, 31, 32, 22, 32, 38, 35, 37, 36,
            13, 7, 21, 20, 21, 29, 33, 30, 11, 20, 4, 34, 29, 26, 16, 27, 30, 37, 36, 38, 21, 34,
            23, 24, 38, 31, 22, 32, 35, 12, 33, 39, 31, 35, 37, 34, 37, 24, 25, 37, 17, 1, 31, 39,
            33, 13, 18, 40, 37, 21, 38, 34, 33, 34, 35, 26, 19, 26, 33, 17, 16, 23, 28, 19, 22, 39,
            27, 20, 38, 27, 22, 41, 18, 5, 36, 20, 25, 34, 29, 28, 40, 40, 41, 42, 41, 7, 42, 39,
            41, 35, 20, 23, 23, 34, 42, 39, 36, 32, 24, 40, 20, 32, 35, 41, 35, 19, 35, 43, 13, 42,
            44, 42, 43, 37, 38, 33, 37, 43, 36, 34, 20, 24, 39, 21, 25, 3, 26, 40, 22, 26, 44, 37,
            13, 22, 40, 36, 27, 38, 18, 14, 33, 34, 29, 8, 37, 39, 38, 39, 4, 28, 40, 43, 14, 30,
            30, 39, 9, 13, 34, 42, 17, 23, 28, 45, 44, 40, 31, 19, 40, 32, 33, 5, 33, 44, 24, 29,
            25, 43, 46, 15, 45, 40, 38, 47, 31, 35, 21, 25, 30, 34, 41, 41, 4, 35, 30, 31, 10, 31,
            29, 16, 22, 17, 42, 38, 43, 47, 44, 48, 9, 44, 34, 32, 30, 21, 44, 36, 42, 21, 44, 17,
            35, 32, 19, 45, 7, 14, 37, 28, 44, 18, 18, 19, 46, 47, 47, 23, 36, 18, 21, 43, 33, 38,
            44, 33, 26, 42, 47, 22, 19, 23, 36, 34, 10, 24, 36, 25, 37, 48, 38, 35, 36, 48, 45, 49,
            31, 20, 20, 11, 37, 39, 43, 45, 36, 5, 35, 32, 26, 50, 15, 33, 37, 21, 31, 36, 32, 49,
            37, 26, 40, 38, 46, 23, 48, 39, 33, 11, 44, 40, 43, 22, 40, 19, 42, 47, 19, 27, 50, 38,
            21, 38, 41, 28, 42, 38, 50, 43, 29, 41, 42, 51, 44, 45, 50, 43, 39, 44, 39, 49, 23, 24,
            30, 45, 21, 30, 12, 48, 25, 49, 24, 51, 46, 19, 47, 34, 51, 48, 52, 33, 50, 39, 41, 13,
            51, 46, 39, 53, 27, 38, 40, 40, 52, 26, 44, 28, 53, 37, 54, 39, 42, 23, 25, 37, 8, 25,
            51, 46, 47, 38, 26, 51, 53, 29, 20, 34, 40, 29, 48, 48, 53, 49, 27, 49, 55, 31, 55, 39,
            52, 53, 30, 40, 52, 41, 35, 51, 56, 42, 53, 31, 45, 46, 53, 50, 50, 22, 41, 50, 54, 27,
            44, 51, 55, 24, 51, 51, 46, 52, 33, 54, 23, 55, 42, 43, 32, 56, 31, 43, 53, 56, 26, 33,
            35, 46, 42, 52, 24, 19, 28, 24, 6, 25, 35, 44, 46, 51, 13, 55, 48, 47, 21, 49, 41, 19,
            14, 54, 20, 56, 36, 49, 55, 56, 45, 55, 27, 25, 43, 28, 42, 21, 56, 30, 49, 57, 48, 22,
            25, 46, 32, 50, 28, 37, 53, 45, 58, 33, 51, 29, 59, 58, 34, 52, 56, 35, 59, 53, 35, 48,
            60, 61, 38, 31, 25, 46, 42, 47, 14, 61, 53, 42, 15, 36, 13, 16, 54, 39, 61, 33, 36, 26,
            61, 42, 53, 39, 18, 21, 17, 54, 54, 14, 59, 36, 33, 49, 40, 62, 31, 26, 34, 47, 10, 61,
            63, 49, 55, 52, 30, 56, 29, 57, 34, 48, 27, 64, 48, 42, 55, 57, 62, 58, 59, 7, 62, 23,
            60, 63, 49, 43, 44, 22, 41, 28, 32, 57, 47, 50, 57, 33, 51, 51, 30, 61, 65, 9, 31, 65,
            61, 49, 64, 58, 53, 63, 46, 66, 44, 31, 62, 58, 63, 41,
        ];

        assert_eq!(
            Solution::longest_obstacle_course_at_each_position(input.into()),
            output
        )
    }
}
